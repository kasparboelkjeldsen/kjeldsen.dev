{"version":3,"file":"funTimeWebEkg.vue2.mjs","sources":["../../../../../components/blocks/funTimeWebEkg.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2 class=\"text-white text-2xl font-bold\">{{ status }}</h2>\r\n    <div class=\"h-20 mb-8\">\r\n      <Line :data=\"chartData\" :options=\"chartOptions\" />\r\n    </div>\r\n\r\n    <div v-if=\"murders.length\" class=\"prose prose-invert mt-6\">\r\n      <h3>üíÄ Crime Scene Log</h3>\r\n      <ul>\r\n        <li\r\n          v-for=\"murder in murders\"\r\n          :key=\"murder.username\"\r\n          class=\"flex justify-between items-center border-b border-gray-700 py-2\"\r\n        >\r\n          <span class=\"font-semibold\">\r\n            {{ murder.username }}\r\n            <span v-if=\"murder.count > 1\" class=\"text-sm text-pink-400 ml-2\">\r\n              ({{ murder.count }} times ‚Äî chill üòÖ)\r\n            </span>\r\n          </span>\r\n          <span class=\"text-sm text-gray-400\">{{\r\n            formatDate(murder.last)\r\n          }}</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div v-else class=\"text-gray-400 mt-6 italic\">\r\n      üïäÔ∏è No murders on record. Peace reigns, or I'm dead.\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\nimport { ref, onMounted, onBeforeUnmount } from \"vue\";\r\nimport { useRuntimeConfig } from \"#imports\";\r\nimport { Line } from \"vue-chartjs\";\r\nimport {\r\n  Chart as ChartJS,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  LineElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n} from \"chart.js\";\r\nimport type { Murder } from \"~/types/murder\";\r\n\r\nChartJS.register(\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  LineElement,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement\r\n);\r\n\r\nconst status = ref(\"I'm alive! üòÑ\");\r\nconst murders = ref<Murder[]>([]);\r\nconst config = useRuntimeConfig();\r\nconst cmsHost = config.public.cmsHost;\r\n\r\nasync function fetchMurders() {\r\n  \r\n  const murderData = await $fetch<Murder[]>(\"/api/murder/list\")\r\n\r\n  if (murderData) murders.value = murderData;\r\n}\r\n\r\nconst formatDate = (dateStr: string) => {\r\n  const date = new Date(dateStr);\r\n  return date.toLocaleString();\r\n};\r\n\r\n// ü´Ä [EKG stuff below unchanged from your setup]...\r\n\r\nconst dataPoints = 400;\r\nconst chartData = ref({\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n  labels: Array(dataPoints).fill(\"\"),\r\n  datasets: [\r\n    {\r\n      label: \"Heartbeat\",\r\n      data: Array(dataPoints).fill(0),\r\n      borderColor: \"rgb(0, 255, 0)\",\r\n      borderWidth: 2,\r\n      tension: 0.3,\r\n      pointRadius: 0,\r\n    },\r\n  ],\r\n});\r\n\r\nconst chartOptions = {\r\n  responsive: true,\r\n  animation: { duration: 0 },\r\n  scales: {\r\n    x: { display: false },\r\n    y: { min: 0, max: 1.5, display: false },\r\n  },\r\n  plugins: { legend: { display: false } },\r\n};\r\n\r\nlet interval: ReturnType<typeof setInterval> | null = null;\r\nlet animationFrame: number | null = null;\r\nlet lastBeatTime = Date.now();\r\n\r\nconst spikeShape = Array.from({ length: 50 }, (_, i) => {\r\n  const x = i / 49;\r\n  return x < 0.1 ? 1.2 * (x / 0.1) : 1.2 * Math.exp(-5 * (x - 0.1));\r\n});\r\nlet spikeQueue: number[] = [];\r\n\r\nconst fetchHeartbeat = async () => {\r\n  try {\r\n    await $fetch(`${cmsHost}/api/heartbeat/beat`);\r\n    lastBeatTime = Date.now();\r\n    spikeQueue = [...spikeShape];\r\n  } catch {\r\n    // No beat detected\r\n    status.value = \"Potential heart failure! üíî\";\r\n  }\r\n};\r\n\r\nconst updateChart = () => {\r\n  const now = Date.now();\r\n  const noHeartbeat = now - lastBeatTime > 2000;\r\n  const nextValue = spikeQueue.length ? spikeQueue.shift()! : 0;\r\n\r\n  const newLabels = [...chartData.value.labels.slice(1), \"\"];\r\n  const newData = [...chartData.value.datasets[0].data.slice(1), nextValue];\r\n\r\n  chartData.value = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    labels: newLabels,\r\n    datasets: [\r\n      {\r\n        ...chartData.value.datasets[0],\r\n        data: newData,\r\n        borderColor: noHeartbeat ? \"rgb(255, 0, 0)\" : \"rgb(0, 255, 0)\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  if (noHeartbeat) {\r\n    status.value = \"I'm dead! üíÄ Who did this?\";\r\n    fetchMurders(); // Refresh the murder list when dead\r\n  } else {\r\n    status.value = \"I'm alive! üòÑ\";\r\n  }\r\n\r\n  animationFrame = requestAnimationFrame(updateChart);\r\n};\r\n\r\nonMounted(async () => {\r\n  interval = setInterval(fetchHeartbeat, 1000);\r\n  updateChart();\r\n  await fetchMurders(); // Initial murder log load\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  if (interval) clearInterval(interval);\r\n  if (animationFrame) cancelAnimationFrame(animationFrame);\r\n});\r\n</script>\r\n\r\n<style scoped>\r\ncanvas {\r\n  background: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\nul li:hover {\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  transition: background-color 0.2s ease-in-out;\r\n}\r\n</style>\r\n"],"names":["ChartJS"],"mappings":";;;;;AA8EA,MAAM,aAAa;;;;;AA7BXA,UAAA;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEM,UAAA,SAAS,IAAI,eAAe;AAC5B,UAAA,UAAU,IAAc,EAAE;AAChC,UAAM,SAAS,iBAAiB;AAChB,WAAO,OAAO;AASxB,UAAA,aAAa,CAAC,YAAoB;AAChC,YAAA,OAAO,IAAI,KAAK,OAAO;AAC7B,aAAO,KAAK,eAAe;AAAA,IAC7B;AAKA,UAAM,YAAY,IAAI;AAAA,MACpB,YAAY;AAAA,MACZ,qBAAqB;AAAA,MACrB,QAAQ,MAAM,UAAU,EAAE,KAAK,EAAE;AAAA,MACjC,UAAU;AAAA,QACR;AAAA,UACE,OAAO;AAAA,UACP,MAAM,MAAM,UAAU,EAAE,KAAK,CAAC;AAAA,UAC9B,aAAa;AAAA,UACb,aAAa;AAAA,UACb,SAAS;AAAA,UACT,aAAa;AAAA,QAAA;AAAA,MACf;AAAA,IACF,CACD;AAED,UAAM,eAAe;AAAA,MACnB,YAAY;AAAA,MACZ,WAAW,EAAE,UAAU,EAAE;AAAA,MACzB,QAAQ;AAAA,QACN,GAAG,EAAE,SAAS,MAAM;AAAA,QACpB,GAAG,EAAE,KAAK,GAAG,KAAK,KAAK,SAAS,MAAM;AAAA,MACxC;AAAA,MACA,SAAS,EAAE,QAAQ,EAAE,SAAS,MAAQ,EAAA;AAAA,IACxC;AAMmB,UAAM,KAAK,EAAE,QAAQ,GAAG,GAAG,CAAC,GAAG,MAAM;AACtD,YAAM,IAAI,IAAI;AACP,aAAA,IAAI,MAAM,OAAO,IAAI,OAAO,MAAM,KAAK,IAAI,MAAM,IAAI,IAAI;AAAA,IACjE,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;"}