trigger:
  branches:
    include:
      - main
  paths:
    include:
      - kjeldsen.backend/**
      - kjeldsen.frontend/**

pool: Default

variables:
  - group: site
  - name: configuration
    value: 'Release'
  - name: backendProject
    value: 'kjeldsen.backend/kjeldsen.backend.csproj'
  - name: frontendDirectory
    value: 'kjeldsen.frontend'
  - name: azureSubscription
    value: 'kjeldsen.dev'
  - name: resourceGroup
    value: 'kjdev-rg'
  - name: webAppNameCm
    value: 'kjdev-app-backend'
  - name: webAppNameFrontend
    value: 'kjdev-app-frontend'

stages:
  - stage: BuildFrontend
    displayName: 'Build Frontend (Nuxt)'
    condition: |
      or(
        contains(variables['Build.TriggeredByChanges'], 'kjeldsen.frontend'),
        eq(variables['Build.Reason'], 'Manual')
      )
    jobs:
      - job: BuildAndPublishFrontend
        displayName: 'Build and Publish Frontend'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'

          - task: PowerShell@2
            displayName: 'Install dependencies and build Nuxt'
            env:
              AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
              AZURE_TENANT_ID: $(AZURE_TENANT_ID)
              AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
            inputs:
              targetType: 'inline'
              script: |
                cd "$(frontendDirectory)"
                npm ci
                npm run generate-env
                npm run build


          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(frontendDirectory)/.output'
              artifactName: 'frontend'
            displayName: 'Publish frontend artifact'

          - task: AzureWebApp@1
            displayName: 'Deploy Frontend to Azure App Service'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(webAppNameFrontend)'
              package: '$(frontendDirectory)/.output'
              appType: 'webApp'
              deploymentMethod: 'zipDeploy'

  - stage: BuildBackend
    displayName: 'Build and Deploy Umbraco Backend'
    dependsOn: BuildFrontend
    jobs:
      - job: BuildAndPublishBackend
        displayName: 'Build and Publish Umbraco Artifact'
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET SDK'
            inputs:
              packageType: 'sdk'
              version: '9.x'
              includePreviewVersions: true

          - task: DotNetCoreCLI@2
            displayName: 'Publish Umbraco (Trimmed)'
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: '$(backendProject)'
              arguments: >
                --configuration $(configuration)
                --output $(Build.ArtifactStagingDirectory)/umbraco
                /p:SelfContained=false
                /p:RuntimeIdentifier=win-x86
                /p:PublishReadyToRun=true
                /p:EnableCompressionInSingleFile=true
              zipAfterPublish: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Umbraco Artifact'
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/umbraco'
              artifactName: 'umbraco'

      - job: DeployBackend
        displayName: 'Deploy Umbraco to Azure App Service'
        dependsOn: BuildAndPublishBackend
        steps:
          - download: current
            artifact: umbraco
            displayName: 'Download Umbraco Artifact'

          - task: AzureRmWebAppDeployment@5
            displayName: 'Deploy Umbraco CM to Azure App Service'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: '$(azureSubscription)'
              appType: 'webApp'
              WebAppName: '$(webAppNameCm)'
              packageForLinux: '$(Pipeline.Workspace)/umbraco/*.zip'
              enableCustomDeployment: true
              DeploymentType: 'zipDeploy'
